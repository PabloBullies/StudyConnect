plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'pb.studyconnect'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.mapstruct:mapstruct:1.6.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    enabled = false
}

test {
    enabled = gradle.startParameter.taskNames.contains('test')
    systemProperties(System.getProperties())
    useJUnitPlatform()
}

tasks.register('testJar', Jar) {
    dependsOn(compileJava)
    dependsOn(processResources)
    from {
       sourceSets.test.runtimeClasspath.filter { it.name != 'main' }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveBaseName = 'testJar'
    from sourceSets.test.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
